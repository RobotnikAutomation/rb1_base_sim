<?xml version="1.0"?>
<launch>

	<arg name="id_robot" default="robot"/>
	<arg name="prefix" value="$(arg id_robot)_"/>
	<arg name="xacro_robot" default="rb1_base.urdf.xacro"/>
	<arg name="has_elevator" default="false"/>
	<arg name="xacro_robot_elevator" default="rb1_base_elevator.urdf.xacro"/>
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="init_yaw" default="0"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="false"/>
	<arg name="global_frame" default="$(arg prefix)map"/>
	<arg name="map_file" default="$(find rb1_base_localization)/maps/empty/empty.yaml"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="launch_pad" default="false"/>
	<arg name="use_ros_planar_move_plugin" default="true"/>
	<arg name="use_gpu_for_simulation" default="$(optenv ROBOT_SIM_GPU false)"/>
	<arg name="fake_elevator_physics" default="$(optenv ROBOT_SIM_FAKE_ELEVATOR false)"/>

	<!-- BEGIN ROBOT-->
	<group ns="$(arg id_robot)">

		<!-- Load the URDF into the ROS Parameter Server -->
		<param unless="$(arg has_elevator)" name="robot_description"
		command="$(find xacro)/xacro '$(find rb1_base_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg use_ros_planar_move_plugin) gpu:=$(arg use_gpu_for_simulation) --inorder"/>
		<param if="$(arg has_elevator)" name="robot_description"
		command="$(find xacro)/xacro '$(find rb1_base_description)/robots/$(arg xacro_robot_elevator)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg use_ros_planar_move_plugin) gpu:=$(arg use_gpu_for_simulation) --inorder"/>


		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_rb1_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -Y $(arg init_yaw) -urdf -param robot_description -model $(arg id_robot)" />

		<!-- Robot state publisher -->
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- start rb1_base_control nodes -->
		<include file="$(find rb1_base_control)/launch/rb1_base_control.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="id_robot" value="$(arg id_robot)"/>
			<arg name="sim" value="true"/>
			<arg name="has_elevator" value="$(arg has_elevator)"/>
			<arg name="use_ros_planar_move_plugin" value="$(arg use_ros_planar_move_plugin)"/>
			<arg name="fake_elevator_physics" value="$(arg fake_elevator_physics)"/>
		</include>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include file="$(find rb1_base_localization)/launch/rb1_base_localization_basic.launch"/>

		<!-- pad -->
		<include if="$(arg launch_pad)" file="$(find rb1_base_pad)/launch/rb1_base_pad.launch"/>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find rb1_base_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
			<arg name="frame_id" value="$(arg global_frame)"/>
		</include>

		<include if="$(arg launch_amcl_and_mapserver)" file="$(find rb1_base_localization)/launch/amcl.launch">
			<arg name="global_frame" value="$(arg global_frame)"/>
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
			<arg name="init_yaw" value="$(arg init_yaw)"/>
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find rb1_base_navigation)/launch/move_base.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="global_frame" value="$(arg global_frame)"/>
		</include>

		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find rb1_base_localization)/launch/gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

	</group>

</launch>
